# -*- coding: utf-8 -*-
"""pokemon_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vdtjg41KhrizIb82ZbMMuXGgAJ9LivO6
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score
from sklearn.model_selection import train_test_split
from google.colab import drive

#Carrega o Drive
drive.mount("/content/gdrive")

#Pega o dataset de https://www.kaggle.com/datasets/maca11/all-pokemon-dataset
DATASET_PATH = "gdrive/My Drive/Colab Notebooks/all_pokemon_data.csv"
data = pd.read_csv(DATASET_PATH)

#Pré-processamento
data["Legendary Status"] = data["Legendary Status"].astype(int)
data["Base Stat Total"] = pd.to_numeric(data["Base Stat Total"], errors="coerce")
data["Health"] = pd.to_numeric(data["Health"], errors="coerce")
data["Attack"] = pd.to_numeric(data["Attack"], errors="coerce")
data["Defense"] = pd.to_numeric(data["Defense"], errors="coerce")
data["Speed"] = pd.to_numeric(data["Speed"], errors="coerce")
data["Special Attack"] = pd.to_numeric(data["Special Attack"], errors="coerce")
data["Special Defense"] = pd.to_numeric(data["Special Defense"], errors="coerce")

data.dropna(subset=[
    "Base Stat Total", "Health", "Attack", "Defense", "Speed", "Legendary Status"
], inplace=True)
data.head()

#Entradas e saída
X = data[["Base Stat Total", "Health", "Attack", "Defense", "Speed"]]
y = data["Legendary Status"]

#Separa treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

#Treinamento
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)
print("Modelo treinado com sucesso!")

#Prever
predictions = model.predict(X_test)

#Métricas
acc = accuracy_score(y_test, predictions)
f1 = f1_score(y_test, predictions, average="weighted")
precision = precision_score(y_test, predictions, average="weighted")
recall = recall_score(y_test, predictions, average="weighted")

print("Resultados reais:", list(y_test.values[:10]))
print("Resultados previstos:", list(predictions[:10]))
print(f"Acurácia: {acc:.2f}")
print(f"F1: {f1}")
print(f"Precisão: {precision}")
print(f"Recall: {recall}")