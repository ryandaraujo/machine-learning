# -*- coding: utf-8 -*-
"""time_series_cinema.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ASUcDVUtGfJNw60Hqcd8ryPMyLytehoc
"""

# !pip install prophet

import pandas as pd
from google.colab import drive
from prophet import Prophet
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error, mean_squared_error
import numpy as np
#Carrega o Drive
drive.mount("/content/gdrive")

#Pega o dataset de https://www.kaggle.com/datasets/arashnic/cinema-ticket
DATASET_PATH = "gdrive/My Drive/Colab Notebooks/cinemaTicket_Ref.csv"
#load dataset
data = pd.read_csv(DATASET_PATH)
data.head()

# Verifica quantas datas únicas existem
print("Datas únicas:", data['date'].nunique())

# Exibe as primeiras 10 datas distintas
print("Exemplos de datas:", data['date'].unique()[:10])

data['date'] = pd.to_datetime(data['date'], errors='coerce')

# Agrupa por data, somando ingressos vendidos
daily_df = data.groupby('date').agg({
    'tickets_sold': 'sum'
}).reset_index()

# Renomeia para usar no Prophet
df = daily_df.rename(columns={'date': 'ds', 'tickets_sold': 'y'})

#Divide entre treino e teste (últimos 30 dias para teste)
train_data = df[:-30]
test_data = df[-30:]


#Inicializa o modelo e treina
model = Prophet()
model.fit(train_data)

#Cria as datas futuras
future = model.make_future_dataframe(periods=30, freq='D')  # D = diário

#Gera as previsões
forecast = model.predict(future)


#Avalia o modelo
y_true = test_data['y'].values
y_pred = forecast['yhat'][-30:].values

mae = mean_absolute_error(y_true, y_pred)
rmse = np.sqrt(mean_squared_error(y_true, y_pred))

print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")


#Compara real x previsto
plt.figure(figsize=(10, 5))
plt.plot(test_data['ds'], y_true, label='Real')
plt.plot(test_data['ds'], y_pred, label='Previsto')
plt.legend()
plt.title('Previsão de Ingressos Vendidos por Dia')
plt.xlabel('Data')
plt.ylabel('Ingressos Vendidos')
plt.grid()
plt.show()

model.plot_components(forecast);